/**
 * Script de test pour v√©rifier la configuration OAuth
 * 
 * Usage: node test-oauth.js
 */

require('dotenv').config();
const { prisma } = require('./src/config/database');

async function testOAuthSetup() {
    console.log('üß™ Test de la configuration OAuth Google\n');
    
    try {
        // 1. V√©rifier les variables d'environnement
        console.log('üìã V√©rification des variables d\'environnement:');
        console.log('   ‚úì JWT_SECRET:', process.env.JWT_SECRET ? '‚úÖ Configur√©' : '‚ùå Manquant');
        console.log('   ‚úì GOOGLE_CLIENT_ID:', process.env.GOOGLE_CLIENT_ID ? '‚úÖ Configur√©' : '‚ö†Ô∏è  Non configur√© (requis pour OAuth)');
        console.log('   ‚úì DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ Configur√©' : '‚ùå Manquant');
        console.log();

        // 2. V√©rifier la connexion √† la base de donn√©es
        console.log('üîå Test de connexion √† la base de donn√©es:');
        await prisma.$connect();
        console.log('   ‚úÖ Connexion r√©ussie\n');

        // 3. V√©rifier la structure de la table users
        console.log('üóÇÔ∏è  V√©rification de la structure de la table users:');
        const result = await prisma.$queryRaw`DESCRIBE users`;
        
        const requiredFields = ['google_id', 'provider', 'profile_picture'];
        const existingFields = result.map(row => row.Field);
        
        console.log('   Champs OAuth:');
        requiredFields.forEach(field => {
            const exists = existingFields.includes(field);
            console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${field}: ${exists ? 'Pr√©sent' : 'Manquant'}`);
        });
        
        // V√©rifier que password est nullable
        const passwordField = result.find(row => row.Field === 'password');
        const isNullable = passwordField && passwordField.Null === 'YES';
        console.log(`   ${isNullable ? '‚úÖ' : '‚ùå'} password (nullable): ${isNullable ? 'Oui' : 'Non'}`);
        console.log();

        // 4. Tester la cr√©ation d'un utilisateur OAuth (simulation)
        console.log('üß™ Test de cr√©ation d\'utilisateur OAuth:');
        
        // V√©rifier si un utilisateur de test existe d√©j√†
        const existingTestUser = await prisma.user.findUnique({
            where: { email: 'test-oauth@example.com' }
        });

        if (existingTestUser) {
            console.log('   ‚ÑπÔ∏è  Utilisateur de test existe d√©j√†, suppression...');
            await prisma.user.delete({
                where: { email: 'test-oauth@example.com' }
            });
        }

        // Cr√©er un utilisateur de test
        const testUser = await prisma.user.create({
            data: {
                email: 'test-oauth@example.com',
                firstName: 'Test',
                lastName: 'OAuth',
                googleId: 'google-test-id-' + Date.now(),
                provider: 'google',
                profilePicture: 'https://example.com/photo.jpg',
                password: null, // Pas de mot de passe pour OAuth
                role: 'USER'
            },
            select: {
                id: true,
                email: true,
                firstName: true,
                lastName: true,
                googleId: true,
                provider: true,
                profilePicture: true
            }
        });

        console.log('   ‚úÖ Utilisateur de test cr√©√© avec succ√®s:');
        console.log('      ID:', testUser.id);
        console.log('      Email:', testUser.email);
        console.log('      Provider:', testUser.provider);
        console.log('      Google ID:', testUser.googleId);
        console.log();

        // Nettoyer l'utilisateur de test
        await prisma.user.delete({
            where: { email: 'test-oauth@example.com' }
        });
        console.log('   üßπ Utilisateur de test supprim√©\n');

        // 5. R√©sum√©
        console.log('üìä R√©sum√©:');
        const allChecks = [
            process.env.JWT_SECRET ? true : false,
            process.env.DATABASE_URL ? true : false,
            existingFields.includes('google_id'),
            existingFields.includes('provider'),
            existingFields.includes('profile_picture'),
            isNullable
        ];
        
        const passedChecks = allChecks.filter(Boolean).length;
        const totalChecks = allChecks.length;
        
        console.log(`   ${passedChecks}/${totalChecks} v√©rifications pass√©es`);
        
        if (!process.env.GOOGLE_CLIENT_ID) {
            console.log('\n‚ö†Ô∏è  ATTENTION:');
            console.log('   GOOGLE_CLIENT_ID n\'est pas configur√© dans .env');
            console.log('   Ajoutez votre Client ID Google pour activer OAuth:');
            console.log('   GOOGLE_CLIENT_ID=votre-id.apps.googleusercontent.com');
            console.log('\n   Voir docs/OAUTH_SETUP.md pour les instructions compl√®tes\n');
        }
        
        if (passedChecks === totalChecks && process.env.GOOGLE_CLIENT_ID) {
            console.log('\n‚úÖ Configuration OAuth compl√®te et fonctionnelle!\n');
        } else if (passedChecks === totalChecks - 1 && !process.env.GOOGLE_CLIENT_ID) {
            console.log('\n‚úÖ Base de donn√©es pr√™te pour OAuth!');
            console.log('‚ö†Ô∏è  Configurez GOOGLE_CLIENT_ID pour activer l\'authentification\n');
        } else {
            console.log('\n‚ùå Des probl√®mes ont √©t√© d√©tect√©s. V√©rifiez les erreurs ci-dessus.\n');
        }

    } catch (error) {
        console.error('\n‚ùå Erreur lors du test:', error.message);
        console.error('\nD√©tails:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ex√©cuter le test
testOAuthSetup();

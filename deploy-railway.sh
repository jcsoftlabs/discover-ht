#!/bin/bash

# Script de d√©ploiement Railway pour listing-backend
echo "üöÄ D√©ploiement de la base de donn√©es sur Railway..."

# Variables - Source from environment or .env.production
RAILWAY_DB_URL="${DATABASE_URL:-mysql://root:password@host:port/railway}"
MYSQL_BIN="/Applications/XAMPP/xamppfiles/bin/mysql"

# Parse DATABASE_URL if available
if [ ! -z "$DATABASE_URL" ]; then
  # Extract components from DATABASE_URL
  # Format: mysql://user:pass@host:port/db
  MYSQL_USER=$(echo $DATABASE_URL | sed -E 's|mysql://([^:]+):.*|\1|')
  MYSQL_PASS=$(echo $DATABASE_URL | sed -E 's|mysql://[^:]+:([^@]+)@.*|\1|')
  MYSQL_HOST=$(echo $DATABASE_URL | sed -E 's|mysql://[^@]+@([^:]+):.*|\1|')
  MYSQL_PORT=$(echo $DATABASE_URL | sed -E 's|mysql://[^@]+@[^:]+:([^/]+)/.*|\1|')
  MYSQL_DB=$(echo $DATABASE_URL | sed -E 's|mysql://[^/]+/(.+)$|\1|')
else
  echo "‚ö†Ô∏è  DATABASE_URL not set. Please set it or source .env.production"
  echo "   export DATABASE_URL='mysql://user:pass@host:port/database'"
  exit 1
fi

# V√©rifier si le client MySQL existe
if [ ! -f "$MYSQL_BIN" ]; then
  echo "‚ùå MySQL client XAMPP non trouv√©. Utilisation du client syst√®me..."
  MYSQL_BIN="mysql"
fi

# Option 1: D√©ployer le sch√©ma complet (avec donn√©es de test)
deploy_full() {
  echo "üì¶ D√©ploiement du sch√©ma complet avec donn√©es de test..."
  $MYSQL_BIN -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASS $MYSQL_DB < prisma/manual_schema.sql
  echo "‚úÖ D√©ploiement complet termin√©!"
}

# Option 2: Utiliser Prisma Push (peut √©chouer avec mysql.proc)
deploy_prisma() {
  echo "üîÑ D√©ploiement via Prisma Push..."
  DATABASE_URL=$RAILWAY_DB_URL npx prisma db push
  echo "‚úÖ Prisma Push termin√©!"
}

# Option 3: G√©n√©rer et ex√©cuter les migrations Prisma
deploy_migrate() {
  echo "üîÑ G√©n√©ration et application des migrations Prisma..."
  DATABASE_URL=$RAILWAY_DB_URL npx prisma migrate deploy
  echo "‚úÖ Migrations appliqu√©es!"
}

# Tester la connexion
test_connection() {
  echo "üß™ Test de connexion √† Railway..."
  DATABASE_URL=$RAILWAY_DB_URL node -e "
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    
    async function test() {
      try {
        const users = await prisma.user.count();
        const establishments = await prisma.establishment.count();
        const partners = await prisma.partner.count();
        console.log('‚úÖ Connexion r√©ussie!');
        console.log('üìä Users:', users);
        console.log('üè® Establishments:', establishments);
        console.log('ü§ù Partners:', partners);
      } catch (error) {
        console.error('‚ùå Erreur:', error.message);
        process.exit(1);
      } finally {
        await prisma.\$disconnect();
      }
    }
    
    test();
  "
}

# Menu principal
case "$1" in
  full)
    deploy_full
    test_connection
    ;;
  prisma)
    deploy_prisma
    test_connection
    ;;
  migrate)
    deploy_migrate
    test_connection
    ;;
  test)
    test_connection
    ;;
  *)
    echo "Usage: $0 {full|prisma|migrate|test}"
    echo ""
    echo "Options:"
    echo "  full     - D√©ployer le sch√©ma SQL complet avec donn√©es de test"
    echo "  prisma   - Utiliser Prisma Push"
    echo "  migrate  - G√©n√©rer et appliquer les migrations Prisma"
    echo "  test     - Tester la connexion Railway"
    exit 1
    ;;
esac
